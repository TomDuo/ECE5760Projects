
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module drum(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// I2C for Audio  //////////
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT
);

wire	AUD_CTRL_CLK;
wire	DLY_RST;

assign	AUD_ADCLRCK	=	AUD_DACLRCK;
assign	AUD_XCK		=	AUD_CTRL_CLK;

Reset_Delay			r0	(.iCLK(CLOCK_50),.oRESET(DLY_RST));

Audio_PLL 			p1	(.areset(~DLY_RST),.inclk0(CLOCK_50),.c0(AUD_CTRL_CLK));

I2C_AV_Config 		u3	(	//	Host Side
							.iCLK(CLOCK_50),
							.iRST_N(KEY[0]),
							//	I2C Side
							.I2C_SCLK(I2C_SCLK),
							.I2C_SDAT(I2C_SDAT)	);

AUDIO_DAC_ADC 			u4	(	//	Audio Side
							.oAUD_BCK(AUD_BCLK),
							.oAUD_DATA(AUD_DACDAT),
							.oAUD_LRCK(AUD_DACLRCK),
							.oAUD_inL(audio_inL), // audio data from ADC 
							.oAUD_inR(audio_inR), // audio data from ADC 
							.iAUD_ADCDAT(AUD_ADCDAT),
							.iAUD_extL(audio_outL[17:2]), // audio data to DAC
							.iAUD_extR(audio_outR[17:2]), // audio data to DAC
							//	Control Signals
				         .iCLK_18_4(AUD_CTRL_CLK),
							.iRST_N(DLY_RST)
							);



// The data for the DACs
wire signed [17:0] audio_outL, audio_outR ;

// output from DDS units and noise
//wire signed [15:0] sine_out;

// output two sine waves in quadrature
//assign audio_outR = sine_out;
//assign audio_outL = sine_out; 


/* Success sound generator (440hz).  Hooked up to pin 0 of sound parallel IO port*/
/*
DDS sine   (.clock(AUD_DACLRCK), 
				.reset(KEY[0]),
				.increment({18'd2507, 14'b0}), 
				.phase(8'd0),
				.sine_out(sine_out));
*/
test_node t_n1(
					.clock(CLOCK_50), 
					.reset(KEY[0]),
					.v1(audio_outL),
					.v2(audio_outR));

endmodule



