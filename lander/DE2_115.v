
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE2_115(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// LCD //////////
	output		          		LCD_BLON,
	inout 		     [7:0]		LCD_DATA,
	output		          		LCD_EN,
	output		          		LCD_ON,
	output		          		LCD_RS,
	output		          		LCD_RW,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// I2C for EEPROM //////////
	output		          		EEP_I2C_SCLK,
	inout 		          		EEP_I2C_SDAT,

	//////////// I2C for Audio  //////////
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT,

	//////////// USB 2.0 OTG (Cypress CY7C67200) //////////
	output		     [1:0]		OTG_ADDR,
	output		          		OTG_CS_N,
	inout 		    [15:0]		OTG_DATA,
	input 		          		OTG_INT,
	output		          		OTG_RD_N,
	output		          		OTG_RST_N,
	output		          		OTG_WE_N,

	//////////// SRAM //////////
	output		    [19:0]		SRAM_ADDR,
	output		          		SRAM_CE_N,
	inout 		    [15:0]		SRAM_DQ,
	output		          		SRAM_LB_N,
	output		          		SRAM_OE_N,
	output		          		SRAM_UB_N,
	output		          		SRAM_WE_N
);
//=======================================================
//  REG/WIRE declarations
//=======================================================

//Set all inout pins to tri-state
assign SRAM_DQ = 16'hzzzz;
assign OTG_DATA = 16'hzzzz;
assign I2C_SDAT = 1'bz;
assign EEP_I2C_SDAT = 1'bz;
assign AUD_DACLRCK = 1'bz;
assign LCD_DATA = 8'hzz;

//=======================================================
//  Structural coding
//=======================================================
 
the_whole_shit the_whole_shit_inst
 (
	.SRAM_ADDR_from_the_pixel_buffer           (SRAM_ADDR),
	.SRAM_CE_N_from_the_pixel_buffer           (SRAM_CE_N),
	.SRAM_DQ_to_and_from_the_pixel_buffer      (SRAM_DQ),
	.SRAM_LB_N_from_the_pixel_buffer           (SRAM_LB_N),
	.SRAM_OE_N_from_the_pixel_buffer           (SRAM_OE_N),
	.SRAM_UB_N_from_the_pixel_buffer           (SRAM_UB_N),
	.SRAM_WE_N_from_the_pixel_buffer           (SRAM_WE_N),
	.VGA_BLANK_from_the_vga_controller (VGA_BLANK_N),
	.VGA_B_from_the_vga_controller     (VGA_B),
	.VGA_CLK_from_the_vga_controller   (VGA_CLK),
	.VGA_G_from_the_vga_controller     (VGA_G),
	.VGA_HS_from_the_vga_controller    (VGA_HS),
	.VGA_R_from_the_vga_controller     (VGA_R),
	.VGA_SYNC_from_the_vga_controller  (VGA_SYNC_N),
	.VGA_VS_from_the_vga_controller    (VGA_VS),
	.clk_0                                     (CLOCK_50),
	.clocks_0_VGA_CLK_out                      (),
	.clocks_0_sys_clk_out                      (),
	.reset_n                                   (KEY[0])
 );


endmodule
