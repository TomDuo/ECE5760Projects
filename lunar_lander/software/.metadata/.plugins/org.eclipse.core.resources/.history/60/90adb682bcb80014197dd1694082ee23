
#include "drawing.h"
#include <stdlib.h>

#define RED 0xfa00
#define GREEN 0x7e0
#define BLUE 0x001f

unsigned int cos_table[91] = {255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 251,
		250, 249, 248, 247, 246, 245, 244, 243, 241, 240, 238, 236, 235, 233,
		231, 229, 227, 225, 223, 221, 219, 216, 214, 211, 209, 206, 204, 201,
		198, 195, 192, 190, 186, 183, 180, 177, 174, 171, 167, 164, 160, 157,
		153, 150, 146, 143, 139, 135, 131, 128, 124, 120, 116, 112, 108, 104,
		100, 96, 91, 87, 83, 79, 75, 70, 66, 62, 57, 53, 49, 44, 40, 35, 31,
		27, 22, 18, 13, 9, 4, 0};
unsigned int sin_table[91] = {0, 4, 9, 13, 18, 22, 27, 31, 35, 40, 44, 49, 53, 57, 62,
		66, 70, 75, 79, 83, 87, 91, 96, 100, 104, 108, 112, 116, 120, 124, 128,
		131, 135, 139, 143, 146, 150, 153, 157, 160, 164, 167, 171, 174, 177,
		180, 183, 186, 190, 192, 195, 198, 201, 204, 206, 209, 211, 214, 216,
		219, 221, 223, 225, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243,
		244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 253, 254, 254, 254,
		255, 255, 255, 255};
unsigned int acos_table[91] = {90, 90, 90, 89, 89, 89, 89, 88, 88, 88, 88, 88,
		87, 87, 87, 87, 86, 86, 86, 86, 86, 85, 85, 85, 85, 84, 84, 84, 84, 84,
		83, 83, 83, 83, 82, 82, 82, 82, 81, 81, 81, 81, 81, 80, 80, 80, 80, 79,
		79, 79, 79, 79, 78, 78, 78, 78, 77, 77, 77, 77, 76, 76, 76, 76, 76, 75,
		75, 75, 75, 74, 74, 74, 74, 73, 73, 73, 73, 72, 72, 72, 72, 72, 71, 71,
		71, 71, 70, 70, 70, 70, 69, 69, 69, 69, 68, 68, 68, 68, 67, 67, 67, 67,
		66, 66, 66, 66, 65, 65, 65, 65, 64, 64, 64, 64, 63, 63, 63, 63, 62, 62,
		62, 62, 61, 61, 61, 61, 60, 60, 60, 60, 59, 59, 59, 59, 58, 58, 58, 58,
		57, 57, 57, 56, 56, 56, 56, 55, 55, 55, 55, 54, 54, 54, 53, 53, 53, 53,
		52, 52, 52, 51, 51, 51, 51, 50, 50, 50, 49, 49, 49, 49, 48, 48, 48, 47,
		47, 47, 46, 46, 46, 45, 45, 45, 44, 44, 44, 44, 43, 43, 43, 42, 42, 42,
		41, 41, 40, 40, 40, 39, 39, 39, 38, 38, 38, 37, 37, 37, 36, 36, 35, 35,
		35, 34, 34, 33, 33, 33, 32, 32, 31, 31, 30, 30, 29, 29, 29, 28, 28, 27,
		27, 26, 26, 25, 25, 24, 23, 23, 22, 22, 21, 20, 20, 19, 18, 18, 17, 16,
		15, 14, 13, 12, 11, 10, 09, 07, 05, 0};
unsigned int asin_table[256] = {0, 0, 0, 01, 01, 01, 01, 02, 02, 02, 02, 02, 03,
		03, 03, 03, 04, 04, 04, 04, 05, 05, 05, 05, 05, 06, 06, 06, 06, 07, 07,
		07, 07, 07, 08, 08, 08, 08, 09, 09, 09, 09, 09, 10, 10, 10, 10, 11, 11,
		11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,
		15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
	19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24,
	24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29,
	29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34,
	34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39,
	39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45,
	45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51,
	51, 52, 52, 52, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 57, 57, 58, 58, 58,
	59, 59, 60, 60, 61, 61, 61, 62, 62, 63, 63, 64, 64, 65, 66, 66, 67, 67, 68,
	68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 90};

int cos(unsigned int theta, unsigned int a){
	unsigned int result_abs;
	signed short sign = 1;

	theta = theta % 365;
	if(theta > 180){
		theta = 360 - theta;
	}

	if (theta > 90) {
		sign = -1;
		theta = 180 - theta;
	}
	result_abs = cos_table[theta] * a>>8;
	printf("%dcos(%d)=%d * %d\n", a, theta, result_abs, sign);
	return (int)result_abs * sign;
}

int sin(unsigned int theta, unsigned int a){
	unsigned int result_abs;
	signed short sign = 1;

	theta = theta % 365;
	if(theta > 180){
		sign = -1;
		theta = theta - 180;
	}

	if (theta > 90) {
		theta = 180 - theta;
	}
	result_abs = sin_table[theta] * a>>8;
	printf("%dsin%d=%d * %d\n", a, theta, result_abs, sign);
	return (int)result_abs * sign;
}

void draw_line(int x1, int y1, int x2, int y2, short color)
{
  int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
  volatile short* VGA = (short*)0;

  dx=x2-x1;      /* the horizontal distance of the line */
  dy=y2-y1;      /* the vertical distance of the line */
  dxabs=abs(dx);
  dyabs=abs(dy);
  sdx=sgn(dx);
  sdy=sgn(dy);
  x=dyabs>>1;
  y=dxabs>>1;
  px=x1;
  py=y1;

  VGA[(py << 10) + px]=color;

  if (dxabs>=dyabs) /* the line is more horizontal than vertical */
  {
    for(i=0;i<dxabs;i++)
    {
      y+=dyabs;
      if (y>=dxabs)
      {
        y-=dxabs;
        py+=sdy;
      }
      px+=sdx;
      VGA[(py << 10) + px]=color;
    }
  }
  else /* the line is more vertical than horizontal */
  {
    for(i=0;i<dyabs;i++)
    {
      x+=dxabs;
      if (x>=dyabs)
      {
        x-=dyabs;
        px+=sdx;
      }
      py+=sdy;
      VGA[(py << 10) + px]=color;
    }
  }
}

void clear_screen()
{
	draw_box(0,0,640,480, 0x0000);
}


void draw_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int offset, row, col;
	/* Declare volatile pointer to pixel buffer (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile short * pixel_buffer = (short *) 0x00000000;	// VGA pixel buffer address

	/* assume that the box coordinates are valid */
	for (row = y1; row < y2; ++row)
	{
		for(col = x1; col < x2; ++col)
		{
			offset = (row << 10) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
		}
	}
}
void draw_line_w_angle(unsigned int theta, int offset_x, int offset_y, int x1, int y1, int x2, int y2, int short color){
//	int theta1 =
//	int theta2 =
	draw_line(center_x + sin(theta, len1), center_y + cos(theta, len1), center_x + sin(theta, len2), cos(theta, len2), color);
}

void rotate(int cx, int cy, int* x, int* y, unsigned int theta)
{
	*x -= cx;
	*y -= cy;
	*x = cx + cos(theta, *x) - sin(theta, *y);
	*y = cy + sin(theta, *x) + cos(theta, *y);
}

void draw_lander(int x, int y, unsigned int theta, int thrust)
{

	//clean and legit
//	draw_line(x, y+40, x, y+90, RED);
//	draw_line(x, y+90, x+60, y+90,RED);
//	draw_line(x+60, y+40, x+60, y+90,RED);
//	draw_line(x, y+40, x+30, y,RED);
//	draw_line(x+30, y, x+60, y+40,RED);

	//Testing
//	draw_line(x, y+40, x, y+90, RED);
//	draw_line_w_angle(x, y+40, x, y+90, BLUE, theta, 40, 90);


	draw_line(59, 59, 101, 101, RED);

	draw_line()


}
