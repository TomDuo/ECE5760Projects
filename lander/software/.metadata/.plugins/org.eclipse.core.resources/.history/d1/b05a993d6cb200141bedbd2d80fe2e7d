#include "interrupts.h"

void handle_button_interrupts(void* context, alt_u32 id)
{
    /* Cast context to edge_capture's type. It is important that this be
     * declared volatile to avoid unwanted compiler optimization.
     */
    int button_number;
    volatile int* edge_capture_ptr = (volatile int*) context;
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BASE);


    switch(*edge_capture_ptr)
    {
		case 1: button_number = 0; break;
		case 2: button_number = 1; break;
		case 4: button_number = 2; break;
		case 8: button_number = 3; break;
    }

    printf("Button %d pressed\n", button_number);
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BASE, 0);
}

/* Initialize the pio. */

void init_pio()
{
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
    /* Enable first four interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_BASE, 0xf);
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BASE, 0x0);
    /* Register the interrupt handler. */
    alt_irq_register(PIO_IRQ, edge_capture_ptr,
                      handle_button_interrupts );
}
